// Code generated by mockery v1.0.0. DO NOT EDIT.

package sladder

import mock "github.com/stretchr/testify/mock"

// MockTxnCoordinator is an autogenerated mock type for the TxnCoordinator type
type MockTxnCoordinator struct {
	mock.Mock
}

// TransactionBeginKV provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockTxnCoordinator) TransactionBeginKV(_a0 *Transaction, _a1 *Node, _a2 string) (*KeyValue, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *KeyValue
	if rf, ok := ret.Get(0).(func(*Transaction, *Node, string) *KeyValue); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*KeyValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Transaction, *Node, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionCommit provides a mock function with given fields: _a0, _a1
func (_m *MockTxnCoordinator) TransactionCommit(_a0 *Transaction, _a1 []*TransactionOperation) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*Transaction, []*TransactionOperation) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Transaction, []*TransactionOperation) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRollback provides a mock function with given fields: _a0
func (_m *MockTxnCoordinator) TransactionRollback(_a0 *Transaction) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Transaction) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionStart provides a mock function with given fields: _a0
func (_m *MockTxnCoordinator) TransactionStart(_a0 *Transaction) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*Transaction) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Transaction) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
